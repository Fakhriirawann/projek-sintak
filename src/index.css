/*
 * Tailwind CSS v4 Configuration - Main CSS File
 *
 * This file consolidates configuration, base styles, and custom utilities
 * following Tailwind CSS v4's "CSS-First Configuration" approach.
 *
 * Note: If you still need a `tailwind.config.js` for complex JS-based
 * plugins or legacy features, you'd add `@config "../../tailwind.config.js";`
 * at the very top of this file (adjust path as needed).
 */

@font-face {
  font-family: "Dancing";
  src: url("./assets/DancingScript-Regular.ttf") format("truetype");
}

@import "tailwindcss"; /* The single import for Tailwind CSS v4 */

/*
  * @theme directive for custom design tokens.
  * This replaces much of the 'theme.extend' from tailwind.config.js
  * and makes variables available as utility classes.
  */
@theme {
  --font-dancing: Dancing, "cursive";

  /* Colors */
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary-DEFAULT: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary-DEFAULT: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive-DEFAULT: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted-DEFAULT: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent-DEFAULT: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover-DEFAULT: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card-DEFAULT: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  /* Explicit cream colors. Tailwind v4 supports custom properties with namespaced colors */
  --color-cream-50: #fefdf8;
  --color-cream-100: #fdf8f0;
  --color-cream-200: #faf0e1;
  --color-cream-300: #f6e7d2;
  --color-cream-400: #f2dec3;
  --color-cream-500: #eed5b4;
  --color-cream-600: #eacca5;
  --color-cream-700: #e6c396;
  --color-cream-800: #e2ba87;
  --color-cream-900: #deb178;

  /* Explicit pink colors */
  --color-pink-50: #fdf2f8;
  --color-pink-100: #fce7f3;
  --color-pink-200: #fbcfe8;
  --color-pink-300: #f9a8d4;
  --color-pink-400: #f472b6;
  --color-pink-500: #ec4899;
  --color-pink-600: #db2777;
  --color-pink-700: #be185d;
  --color-pink-800: #9d174d;
  --color-pink-900: #831843;

  /* Font Family - Now defined directly in @theme */
  --font-family-sans: "Inter", system-ui, sans-serif;

  /* Animations - defined in @theme with @keyframes */
  --animation-fade-in: fadeIn 0.5s ease-in-out;
  --animation-slide-up: slideUp 0.5s ease-out;

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Border Radius - using --radius variable */
  --border-radius-lg: var(--radius);
  --border-radius-md: calc(var(--radius) - 2px);
  --border-radius-sm: calc(var(--radius) - 4px);

  /* Default transition for all elements */
  --transition-property-all: all;
  --transition-duration-default: 0.2s;
  --transition-timing-function-default: ease-in-out;
}

/*
  * Base styles and custom utilities directly in CSS.
  * For global CSS, use @layer base.
  */
@layer base {
  /* Import Google Fonts (remains the same) */
  @import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap");

  /* Universal reset (still valid CSS, but consider if Tailwind's base reset is enough) */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  /* Body styles using Tailwind utilities where possible */
  body {
    /* Tailwind utilities for font, line-height, color, background */
    @apply font-sans leading-relaxed text-gray-700 bg-cream-50; /* Assuming cream-50 is the closest to #fefdf8 */
  }

  /* Custom scrollbar styles using WebKit pseudoelements */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: theme(
      --color-slate-100
    ); /* Use Tailwind color variable for bg-gray-100 or bg-slate-100 */
  }

  ::-webkit-scrollbar-thumb {
    background: theme(--color-pink-500); /* Use custom pink color */
    border-radius: theme(
      --border-radius-md
    ); /* Use a defined border-radius from theme */
  }

  ::-webkit-scrollbar-thumb:hover {
    background: theme(--color-pink-700); /* Use custom pink color on hover */
  }

  /* Smooth transitions - Applied globally using a CSS variable defined in @theme */
  * {
    transition: var(--transition-property-all)
      var(--transition-duration-default)
      var(--transition-timing-function-default);
  }
}

/*
  * Custom components.
  * These are specific reusable styles you might define.
  */
@layer components {
  /* Container - Define it once and reuse it */
  .container {
    @apply max-w-screen-xl mx-auto px-4; /* max-width: 1200px equivalent (or adjust screen-xl to 1200px in theme) */
  }

  /* Focus styles (using Tailwind's built-in ring utilities and custom colors) */
  /* This is a more idiomatic Tailwind v4 way than direct CSS */
  button:focus-visible,
  input:focus-visible,
  textarea:focus-visible,
  select:focus-visible {
    /* Use focus-visible for better accessibility (only shows outline when navigating with keyboard) */
    @apply outline-none ring-2 ring-pink-500; /* Use custom pink color for the ring */
  }
}

/*
  * Custom utilities (if any) or existing Tailwind utilities.
  * For these specific hover effects, you'll generally apply them directly to elements
  * using Tailwind's built-in hover variants, or create custom ones with @custom-variant if needed.
  */
@layer utilities {
  /* Custom button hover effects - Apply directly on elements */
  /* Example: <button class="transition-all duration-200 ease-in-out hover:-translate-y-0.5 hover:shadow-lg"> */
  /* Note: shadow-lg is already a Tailwind utility. You can define custom shadows in @theme if needed. */
  /* You can also use a custom utility if you need this specific combination often: */
  .btn-hover {
    @apply transition-all duration-200 ease-in-out hover:-translate-y-0.5 hover:shadow-lg;
    /* This translates to: transform: translateY(-2px); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); */
    /* Tailwind's default shadow-lg is often equivalent or very close */
  }

  /* Image hover effects */
  /* Example: <img class="transition-transform duration-200 ease-in-out hover:scale-105"> */
  .img-hover {
    @apply transition-transform duration-200 ease-in-out hover:scale-105;
  }

  /* Card hover effects */
  /* Example: <div class="transition-all duration-200 ease-in-out hover:-translate-y-1.5 hover:shadow-2xl"> */
  .card-hover {
    @apply transition-all duration-200 ease-in-out hover:-translate-y-1.5 hover:shadow-2xl;
    /* This translates to: transform: translateY(-5px); box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1); */
    /* Tailwind's default shadow-2xl is often equivalent or very close */
  }
}

@keyframes shine {
  0% {
    background-position: -200% center;
  }
  100% {
    background-position: 200% center;
  }
}

.shiny-text {
  background: linear-gradient(
    35deg,
    #ec4899 0%,
    #eacca5 25%,
    #db2777 75%,
    #f472b6 100%
  );
  background-size: 200% auto;
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  -webkit-text-fill-color: transparent;
  animation: shine 24s linear infinite;
}

@keyframes fadeInOut {
  0%,
  100% {
    opacity: 0;
  }
  10%,
  90% {
    opacity: 1;
  }
}
.animate-fadeInOut {
  animation: fadeInOut 6s ease forwards;
}

@keyframes blink {
  0%,
  50%,
  100% {
    opacity: 1;
  }
  25%,
  75% {
    opacity: 0;
  }
}

.animate-blink {
  animation: blink 1s step-start infinite;
}
